// Generated by gencpp from file offb_msgs/Formation.msg
// DO NOT EDIT!


#ifndef OFFB_MSGS_MESSAGE_FORMATION_H
#define OFFB_MSGS_MESSAGE_FORMATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace offb_msgs
{
template <class ContainerAllocator>
struct Formation_
{
  typedef Formation_<ContainerAllocator> Type;

  Formation_()
    : type(0)  {
    }
  Formation_(const ContainerAllocator& _alloc)
    : type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(HORIZONTAL)
  #undef HORIZONTAL
#endif
#if defined(_WIN32) && defined(TRIANGEL)
  #undef TRIANGEL
#endif
#if defined(_WIN32) && defined(DIAMOND)
  #undef DIAMOND
#endif
#if defined(_WIN32) && defined(DIAMOND_STAGE_1)
  #undef DIAMOND_STAGE_1
#endif

  enum {
    HORIZONTAL = 0u,
    TRIANGEL = 1u,
    DIAMOND = 2u,
    DIAMOND_STAGE_1 = 3u,
  };


  typedef boost::shared_ptr< ::offb_msgs::Formation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::offb_msgs::Formation_<ContainerAllocator> const> ConstPtr;

}; // struct Formation_

typedef ::offb_msgs::Formation_<std::allocator<void> > Formation;

typedef boost::shared_ptr< ::offb_msgs::Formation > FormationPtr;
typedef boost::shared_ptr< ::offb_msgs::Formation const> FormationConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::offb_msgs::Formation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::offb_msgs::Formation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::offb_msgs::Formation_<ContainerAllocator1> & lhs, const ::offb_msgs::Formation_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::offb_msgs::Formation_<ContainerAllocator1> & lhs, const ::offb_msgs::Formation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace offb_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::offb_msgs::Formation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offb_msgs::Formation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::offb_msgs::Formation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::offb_msgs::Formation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offb_msgs::Formation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offb_msgs::Formation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::offb_msgs::Formation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "47f40aa4cf085460be9489e1f3e02ea5";
  }

  static const char* value(const ::offb_msgs::Formation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x47f40aa4cf085460ULL;
  static const uint64_t static_value2 = 0xbe9489e1f3e02ea5ULL;
};

template<class ContainerAllocator>
struct DataType< ::offb_msgs::Formation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "offb_msgs/Formation";
  }

  static const char* value(const ::offb_msgs::Formation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::offb_msgs::Formation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 HORIZONTAL=0\n"
"uint8 TRIANGEL=1\n"
"uint8 DIAMOND=2\n"
"uint8 DIAMOND_STAGE_1=3\n"
"\n"
"uint8 type\n"
;
  }

  static const char* value(const ::offb_msgs::Formation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::offb_msgs::Formation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Formation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::offb_msgs::Formation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::offb_msgs::Formation_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OFFB_MSGS_MESSAGE_FORMATION_H
